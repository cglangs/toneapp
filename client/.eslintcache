[{"/Users/corygallagher/Documents/node_projects/toneapp/client/src/index.js":"1","/Users/corygallagher/Documents/node_projects/toneapp/client/src/App.js":"2","/Users/corygallagher/Documents/node_projects/toneapp/client/src/reportWebVitals.js":"3","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Characterbycharacter.js":"4","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Fullsentence.js":"5","/Users/corygallagher/Documents/node_projects/toneapp/client/src/constants.js":"6","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Header.js":"7","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Login.js":"8","/Users/corygallagher/Documents/node_projects/toneapp/client/src/utils.js":"9","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Learn.js":"10","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Dashboard.js":"11"},{"size":1279,"mtime":1613841868591,"results":"12","hashOfConfig":"13"},{"size":1246,"mtime":1614521865494,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1611322745794,"results":"15","hashOfConfig":"13"},{"size":8359,"mtime":1614533301085,"results":"16","hashOfConfig":"13"},{"size":10300,"mtime":1614532997751,"results":"17","hashOfConfig":"13"},{"size":81,"mtime":1613073563799,"results":"18","hashOfConfig":"13"},{"size":1353,"mtime":1614193829403,"results":"19","hashOfConfig":"13"},{"size":3589,"mtime":1614093938987,"results":"20","hashOfConfig":"13"},{"size":559,"mtime":1614522231740,"results":"21","hashOfConfig":"13"},{"size":3678,"mtime":1614533538073,"results":"22","hashOfConfig":"13"},{"size":2295,"mtime":1614528614565,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ildmct",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/corygallagher/Documents/node_projects/toneapp/client/src/index.js",[],["49","50"],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/App.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/reportWebVitals.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/Characterbycharacter.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/Fullsentence.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/constants.js",[],["51","52"],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/Header.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/Login.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/utils.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/Learn.js",["53"],"import { useState} from 'react'\nimport Characterbycharacter from './Characterbycharacter'\nimport Fullsentence from './Fullsentence'\nimport { useQuery, useMutation } from  'react-apollo';\nimport gql from 'graphql-tag';\nimport { redirectToLearnComponent} from './utils'\nimport { useParams } from \"react-router-dom\";\n\n\nconst GET_PHRASE = gql`\nquery getPhrase($deck_id: Int!) {\n  me {\n    _id\n    user_name\n    user_role\n    user_password\n  }\n  getPhrasesInDeck(deck_id: $deck_id) {\n    phrase_order\n    full_phrase\n    phrase_no_punctuation\n    word_list\n    pinyin\n    pinyin_no_tones\n    written_tones\n    spoken_tones\n    is_completed\n  }\n}\n`\n\nconst UPDATE_PROGRESS = gql`\nmutation updateProgress($deck_id: Int!, $phrase_order: Int!) {\n  setPhraseLearned(deck_id: $deck_id, phrase_order: $phrase_order)\n}\n`\n\nconst Learn = (props) => {\n\n  const [fullSentenceMode, setSentenceMode] = useState(false);\n\n  const { deckId, phraseOrder } = useParams();\n\n  const { loading, error, data } = useQuery(GET_PHRASE, {\n    variables: {deck_id: parseInt(deckId)}\n  });\n\n  const [updateProgress, { mutationData }] = useMutation(UPDATE_PROGRESS)\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  function changeMode(isFullSentenceMode){\n    setSentenceMode(isFullSentenceMode)\n  }\n\n  function getPhraseDetails(phrase){\n    console.log(phrase)\n    let phrase_data = {}\n    phrase_data[\"deck_id\"] = parseInt(deckId)\n    phrase_data[\"phrase_order\"] = parseInt(phraseOrder)\n    phrase_data[\"display\"] = phrase.full_phrase\n    phrase_data[\"characters\"] = phrase.phrase_no_punctuation\n    phrase_data[\"pinyin\"] = phrase.pinyin.join(\" \")\n    phrase_data[\"spoken_tones\"] = phrase.spoken_tones.join(\"\").replace(\"0\",\"_\")\n    phrase_data[\"pinyin_no_tones\"] = phrase.pinyin_no_tones\n    phrase_data[\"phrase_order\"] = phrase.phrase_order\n    phrase_data[\"is_completed\"] = phrase.is_completed\n    console.log(phrase_data)\n    return phrase_data\n  }\n\n  function onClickEvent(deck_id, phrase_order){\n    redirectToLearnComponent(props, deck_id, phrase_order)\n  }\n\n  function submitCorrect(){\n    updateProgress({variables:{deck_id: parseInt(deckId), phrase_order: parseInt(phraseOrder)}, \n      update: (store)=> {\n        const data = store.readQuery({ query: GET_PHRASE, variables: { deck_id: parseInt(deckId) } })\n        data.getPhrasesInDeck[phraseOrder][\"is_completed\"] = true\n        store.writeQuery({\n          query: GET_PHRASE,\n          data\n        })\n     }})    \n  }\n\n  return(\n    <div className=\"LearnContainer\">\n      <div className=\"Navbar\">\n        <p className={!fullSentenceMode ? \"selectedItem\": \"\"} onClick={() => changeMode(false)}>Character by Character</p>\n        <p className={fullSentenceMode ? \"selectedItem\": \"\"} onClick={() => changeMode(true)}>Full Sentence</p>\n      </div>\n      <p>{data.getPhrasesInDeck[phraseOrder - 1][\"is_completed\"] && \"COMPLETE\"}</p>\n      <div className=\"toneTrainingInterface\">\n      <button disabled={phraseOrder === 1 } style={{marginRight: \"5%\"}}  onClick={() => onClickEvent(deckId,  parseInt(phraseOrder) - 1)}>{\"<\"}</button>\n      <div style={{width: \"75%\"}}>\n      {fullSentenceMode ? <Fullsentence user={data.me} sentence={getPhraseDetails(data.getPhrasesInDeck[phraseOrder - 1])} mutationFunction={submitCorrect} />: <Characterbycharacter user={data.me} sentence={getPhraseDetails(data.getPhrasesInDeck[phraseOrder - 1])} mutationFunction={submitCorrect}/>}\n      </div>\n      <button disabled={phraseOrder === data.getPhrasesInDeck.length } style={{marginLeft: \"5%\"}} onClick={() => onClickEvent(deckId, parseInt(phraseOrder) + 1)}>{\">\"}</button>\n      </div>\n    </div>\n  )\n    \n}\nexport default Learn","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Dashboard.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"54","replacedBy":"58"},{"ruleId":"56","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":48,"column":28,"nodeType":"62","messageId":"63","endLine":48,"endColumn":40},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],"no-unused-vars","'mutationData' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]