[{"/Users/corygallagher/Documents/node_projects/toneapp/client/src/index.js":"1","/Users/corygallagher/Documents/node_projects/toneapp/client/src/App.js":"2","/Users/corygallagher/Documents/node_projects/toneapp/client/src/reportWebVitals.js":"3","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Characterbycharacter.js":"4","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Fullsentence.js":"5","/Users/corygallagher/Documents/node_projects/toneapp/client/src/constants.js":"6","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Header.js":"7","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Login.js":"8","/Users/corygallagher/Documents/node_projects/toneapp/client/src/utils.js":"9","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Learn.js":"10","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Dashboard.js":"11"},{"size":1279,"mtime":1613841868591,"results":"12","hashOfConfig":"13"},{"size":1246,"mtime":1614521865494,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1611322745794,"results":"15","hashOfConfig":"13"},{"size":10061,"mtime":1614777703687,"results":"16","hashOfConfig":"13"},{"size":13608,"mtime":1614799582804,"results":"17","hashOfConfig":"13"},{"size":81,"mtime":1613073563799,"results":"18","hashOfConfig":"13"},{"size":1353,"mtime":1614193829403,"results":"19","hashOfConfig":"13"},{"size":3589,"mtime":1614093938987,"results":"20","hashOfConfig":"13"},{"size":645,"mtime":1614778703320,"results":"21","hashOfConfig":"13"},{"size":4888,"mtime":1614778669127,"results":"22","hashOfConfig":"13"},{"size":2896,"mtime":1614785053009,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"ildmct",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"/Users/corygallagher/Documents/node_projects/toneapp/client/src/index.js",[],["50","51"],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/App.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/reportWebVitals.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/Characterbycharacter.js",["52","53","54","55","56","57","58"],"import React, { Component } from 'react'\nimport hark from 'hark'\n\nimport io from \"socket.io-client\"\nimport RecordRTC from \"recordrtc\"\n\nimport './App.css';\nimport './Switch.css';\n\n\nlet endpoint = \"http://localhost:5000\"\nlet socket = io.connect(`${endpoint}`)\nclass Characterbycharacter extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      threshold_decibels: 50,\n      voice_present: false,\n      recording: false,\n      new_audio: [],\n      tones_recorded: [],\n      currentIndex: 0,\n      sentence_finished: false,\n      automatic_mode: false,\n      show_pinyin: false\n    }\n    this.state.test_sentence = this.props.sentence\n    this.recorder = null\n    this.speechEvents = null\n  }\n\n  initRecorder = (stream) => {\n      let recorder = RecordRTC(stream, {\n      type: 'audio',\n      sampleRate: 44100,\n      bufferSize: 2048,\n      numberOfAudioChannels: 1,\n      recorderType: RecordRTC.StereoAudioRecorder\n    });\n      return recorder\n  }\n\n  componentDidMount = () => {\n    socket.on('predicted_tone', data => {\n      const prediction = this.state.test_sentence.spoken_tones[data[\"index\"]] === \"_\" ? \"_\" : data[\"prediction\"].toString()\n      const newToneArray = [...this.state.tones_recorded]\n      newToneArray.splice(data[\"index\"], 1, prediction)\n      this.setState({tones_recorded: newToneArray},() => {this.checkPhrase()})\n    })\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if(prevProps.sentence.phrase_order && prevProps.sentence.phrase_order !== this.props.sentence.phrase_order){\n      console.log(\"UPDATE\")\n      this.setState({test_sentence: this.props.sentence})\n    }\n  }\n\n  checkPhrase = () => {\n    let isCorrect = false\n    if(!this.state.sentence_finished && this.state.automatic_mode){\n      this.startRecording()\n    } else if(this.state.sentence_finished){\n      isCorrect = this.state.tones_recorded.every((tone,index) => tone === this.state.test_sentence.spoken_tones[index])    \n    }\n    if(isCorrect && this.props.user && !this.state.test_sentence.is_completed_char){\n      this.props.mutationFunction(true, this.state.test_sentence.is_completed_full)\n    }\n\n  }\n\n  saveRecording = (newAudio, blob) => {\n    newAudio.src = URL.createObjectURL(blob)\n    const finished = this.state.tones_recorded.length === this.state.test_sentence.spoken_tones.length - 1 && this.state.currentIndex === this.state.test_sentence.spoken_tones.length - 1\n    const automatic = this.state.automatic_mode && !finished\n    const showPinyin = finished || this.state.show_pinyin\n    const previousIndex = this.state.currentIndex\n    const newAudioArray = [...this.state.new_audio]\n    newAudioArray.splice(this.state.currentIndex, 1, newAudio)\n\n    \n    this.setState({voice_present: false, new_audio: newAudioArray, recording: false, currentIndex: previousIndex + 1, sentence_finished: finished, automatic_mode: automatic, show_pinyin: showPinyin}, () =>\n    {\n        socket.emit('tone_recorded', {voice_recording: blob, character_index: previousIndex, threshold: this.state.threshold_decibels});\n    })\n   \n  }\n\n\n  startRecording = () => {\n    let _this = this\n    var newAudio = document.getElementById(\"replay-\" + _this.state.currentIndex);\n    navigator.mediaDevices.getUserMedia({audio: true }).then(async function(stream) {\n        _this.recorder = _this.initRecorder(stream)\n        var options = {threshold: -1 * _this.state.threshold_decibels};//-100 is silence -50 is the default\n        _this.speechEvents = hark(stream, options);\n\n        _this.recorder.startRecording();\n\n        _this.speechEvents.on('speaking', function() {\n          console.log('speaking');\n          _this.setState({voice_present: true, predicted_tone: null})\n        });\n\n        _this.speechEvents.on('stopped_speaking', function() {\n          console.log('STOPPED SPEAKING');\n          _this.recorder.stopRecording(async function() {\n          _this.speechEvents.stop()\n          let blob = await _this.recorder.getBlob();\n          _this.saveRecording(newAudio,blob)\n          });\n\n        });\n        _this.setState({recording: true})\n    });\n  }\n\n  toggleMode = () => {\n    this.setState({automatic_mode: !this.state.automatic_mode})\n  }\n\n  togglePinyin = () => {\n    this.setState({show_pinyin: !this.state.show_pinyin})\n  }\n\n  replayAudio = () => {\n    if(this.state.new_audio.length){\n      this.state.new_audio[this.state.currentIndex].play()\n    }\n  }\n\n  playNativeVoice = () => {\n    const letters = this.state.test_sentence.pinyin_no_tones[this.state.currentIndex]\n    const toneNumber = this.state.test_sentence.spoken_tones[this.state.currentIndex]\n    const fileName = '/native_voice_audio/' + letters + toneNumber + '_FV1_MP3.mp3'\n    const audio = new Audio(fileName)\n    audio.play()\n  }\n\n\n  restartSentence = () => {\n    this.setState({currentIndex: 0, tones_recorded: [], sentence_finished: false, new_audio: [], recording: false, automatic_mode: false, show_pinyin: false})\n  }\n\n  handleCharClick = (index) => {\n    if(index <= this.state.tones_recorded.length){\n      this.setState({currentIndex: index})  \n    }\n  }\n\n  diplayString = (text = '', isChars = false) => {\n     const parts = text.split('')\n     return (\n       <span className=\"String-holder\">\n         {parts.map((char,index)=> {\n           if(isChars && index === this.state.currentIndex){\n             return <mark key={index} onClick={() => this.handleCharClick(index)}>{char}</mark>\n           } else if(!isChars && index <= this.state.tones_recorded.length -1 && this.state.test_sentence.spoken_tones[index] == this.state.tones_recorded[index]) {\n             return <mark style={{\"backgroundColor\": \"green\"}}key={index} onClick={() => this.handleCharClick(index)}>{char}</mark>\n           } else if(!isChars && index <= this.state.tones_recorded.length -1 && this.state.test_sentence.spoken_tones[index] != this.state.tones_recorded[index]) {\n             return <mark style={{\"backgroundColor\": \"red\"}}key={index} onClick={() => this.handleCharClick(index)}>{char}</mark>\n           } else{\n             return <span key={index} onClick={() => this.handleCharClick(index)}>{char}</span>\n           }\n\n         })}\n      </span>\n     )\n  }\n\n  recordingButtonClick = () => {\n    let _this = this\n    if(_this.state.recording){\n      _this.setState({automatic_mode: false, recording: false}, ()=> {\n        _this.state.recorder.stopRecording(async function() {\n          _this.state.harkObject.stop()\n        });\n      })\n    } else{\n      _this.startRecording()\n    }\n  }\n\n  render(){\n    let btn_class = this.state.recording ? \"pressedButton\" : \"defaultButton\";\n    const spoken_tones = this.state.sentence_finished ? this.state.test_sentence.spoken_tones : ''\n    return (\n      <div>\n        {\n          this.state.test_sentence.characters.split('').map((recording, index)=> {\n            return <audio key={index} id={\"replay-\" + index}/>\n          })\n        }\n        <div style={{display: \"inline-flex\", flexDirection: \"column\"}}>\n          <p style={{\"textAlign\": \"center\", height: \"1vh\"}}>{this.state.show_pinyin && this.state.test_sentence.pinyin}</p>\n          <p style={{\"textAlign\": \"center\"}}>{this.state.test_sentence.display}</p>\n          {/*this.diplayString(spoken_tones, false)*/}\n          {this.diplayString(this.state.test_sentence.characters, true)}\n          {this.diplayString(this.state.tones_recorded.join(''), false)}\n        </div>\n        <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", \"marginTop\": \"20px\", \"marginBottom\": \"20px\"}}>\n        <button disabled={this.state.currentIndex >= this.state.test_sentence.spoken_tones.length} onClick={this.recordingButtonClick}>\n          <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/record-voice-button.svg\" />\n        </button>\n        <button disabled={this.state.currentIndex >=this.state.tones_recorded.length}  onClick={this.replayAudio}>\n          <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/play-button.svg\" />\n        </button>\n         <button disabled={this.state.tones_recorded.length === 0} onClick={this.restartSentence}>\n              <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/delete-button.svg\" />\n        </button>\n        </div>\n         <button  className=\"defaultButton\"  disabled={this.state.test_sentence.spoken_tones[this.state.currentIndex] === '_' || this.state.currentIndex >= this.state.test_sentence.spoken_tones.length} onClick={this.playNativeVoice}>\n                  Play Native Speaker Audio\n        </button>\n        <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"center\"}}>\n          <p style={{\"height\": \"25px\"}}>{this.state.voice_present ? \"Voice heard\" : this.state.recording ?  \"Recording...\" : \"\"}</p>\n          <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", \"marginTop\": \"20px\"}}>\n            <p style={{fontSize: \"14px\", \"marginBlockStart\": \"-1.5em\", \"marginRight\": \"20px\", \"width\": \"50px\"}}>{\"Manual Mode\"}</p> \n            <label className=\"switch\">\n              <input type=\"checkbox\" checked={this.state.automatic_mode} onChange={this.toggleMode} />\n              <span className=\"slider round\"></span>\n            </label>\n           <p style={{fontSize: \"14px\", \"width\": \"50px\", \"marginBlockStart\": \"-1.5em\", \"marginLeft\": \"3%\"}}>{\"Automatic Mode\"}</p>\n           </div>\n           <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", \"marginTop\": \"20px\"}}>\n           <p style={{fontSize: \"14px\", \"marginBlockStart\": \"-1.5em\", \"marginRight\": \"20px\", \"width\": \"50px\"}}>{\"Hide Pinyin\"}</p>\n            <label className=\"switch\">\n              <input type=\"checkbox\" checked={this.state.show_pinyin} onChange={this.togglePinyin} />\n              <span className=\"slider round\"></span>\n            </label>\n           <p style={{fontSize: \"14px\", \"width\": \"50px\", \"marginBlockStart\": \"-1.5em\", \"marginLeft\": \"3%\"}}>{\"Show Pinyin\"}</p>\n          </div>\n         </div>\n      </div>\n    );\n  }\n}\n\nexport default Characterbycharacter;\n","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Fullsentence.js",["59","60","61","62","63","64","65","66","67","68"],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/constants.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/Header.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/Login.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/utils.js",[],"/Users/corygallagher/Documents/node_projects/toneapp/client/src/Learn.js",["69","70","71"],"import { useState, useRef} from 'react'\nimport Characterbycharacter from './Characterbycharacter'\nimport Fullsentence from './Fullsentence'\nimport { useQuery, useMutation } from  'react-apollo';\nimport gql from 'graphql-tag';\nimport { redirectToLearnComponent} from './utils'\nimport { useParams } from \"react-router-dom\";\n\n\nconst GET_PHRASE = gql`\nquery getPhrase($deck_id: Int!) {\n  me {\n    _id\n    user_name\n    user_role\n    user_password\n  }\n  getPhrasesInDeck(deck_id: $deck_id) {\n    phrase_order\n    full_phrase\n    phrase_no_punctuation\n    word_list\n    pinyin\n    pinyin_no_tones\n    written_tones\n    spoken_tones\n    is_completed_char\n    is_completed_full\n  }\n}\n`\n\nconst UPDATE_PROGRESS = gql`\nmutation updateProgress($deck_id: Int!, $phrase_order: Int!, $is_completed_char: Boolean!, $is_completed_full: Boolean!) {\n  setPhraseLearned(deck_id: $deck_id, phrase_order: $phrase_order, is_completed_char: $is_completed_char, is_completed_full: $is_completed_full){\n    is_completed_char\n    is_completed_full\n  }\n}\n`\n\nconst Learn = (props) => {\n  console.log(props)\n\n  const [fullSentenceMode, setSentenceMode] = useState(props.location.state.isFullSentenceMode);\n\n  const { deckId, phraseOrder } = useParams();\n  const characterByCharacterRef = useRef();\n  const fullSentenceRef = useRef();\n\n  const { loading, error, data } = useQuery(GET_PHRASE, {\n    variables: {deck_id: parseInt(deckId)}\n  });\n\n  const [updateProgress, { mutationData }] = useMutation(UPDATE_PROGRESS)\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  function changeMode(isFullSentenceMode){\n    setSentenceMode(isFullSentenceMode)\n  }\n\n  function getPhraseDetails(phrase){\n    console.log(phrase)\n    let phrase_data = {}\n    phrase_data[\"deck_id\"] = parseInt(deckId)\n    phrase_data[\"phrase_order\"] = parseInt(phraseOrder)\n    phrase_data[\"display\"] = phrase.full_phrase\n    phrase_data[\"characters\"] = phrase.phrase_no_punctuation\n    phrase_data[\"pinyin\"] = phrase.pinyin.join(\" \")\n    phrase_data[\"spoken_tones\"] = phrase.spoken_tones.join(\"\").replaceAll(\"5\",\"_\")\n    phrase_data[\"pinyin_no_tones\"] = phrase.pinyin_no_tones\n    phrase_data[\"phrase_order\"] = phrase.phrase_order\n    phrase_data[\"is_completed_char\"] = phrase.is_completed_char\n    phrase_data[\"is_completed_full\"] = phrase.is_completed_full\n    console.log(phrase_data)\n    return phrase_data\n  }\n\n  function onClickEvent(deck_id, phrase_order){\n    if(fullSentenceMode){\n      fullSentenceRef.current.restartSentence()\n    }else{\n      characterByCharacterRef.current.restartSentence()\n    }\n    redirectToLearnComponent(props, deck_id, phrase_order, fullSentenceMode)\n  }\n\n  function submitCorrect(is_completed_char, is_completed_full){\n    updateProgress({variables:{deck_id: parseInt(deckId), phrase_order: parseInt(phraseOrder), is_completed_char: is_completed_char, is_completed_full: is_completed_full}, \n      update: (store)=> {\n        const data = store.readQuery({ query: GET_PHRASE, variables: { deck_id: parseInt(deckId) } })\n        data.getPhrasesInDeck[phraseOrder - 1][\"is_completed_char\"] = is_completed_char\n        data.getPhrasesInDeck[phraseOrder - 1][\"is_completed_full\"] = is_completed_full\n        store.writeQuery({\n          query: GET_PHRASE,\n          data\n        })\n     }})    \n  }\n\n  return(\n    <div className=\"LearnContainer\">\n      <div className=\"Navbar\">\n        <p className={!fullSentenceMode ? \"selectedItem\": \"\"} onClick={() => changeMode(false)}>Character by Character</p>\n        <p className={fullSentenceMode ? \"selectedItem\": \"\"} onClick={() => changeMode(true)}>Full Sentence</p>\n      </div>\n      <p>{((data.getPhrasesInDeck[phraseOrder - 1][\"is_completed_char\"] && !fullSentenceMode) || (data.getPhrasesInDeck[phraseOrder - 1][\"is_completed_full\"] && fullSentenceMode)) && \"COMPLETE\"}</p>\n      <div className=\"toneTrainingInterface\">\n      <button disabled={phraseOrder=== \"1\" } style={{marginRight: \"5%\"}}  onClick={() => onClickEvent(deckId,  parseInt(phraseOrder) - 1)}>\n        <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/left-arrow-button.svg\" />\n      </button>\n      <div style={{width: \"75%\"}}>\n      {fullSentenceMode ? <Fullsentence ref={fullSentenceRef} user={data.me} sentence={getPhraseDetails(data.getPhrasesInDeck[phraseOrder - 1])} mutationFunction={submitCorrect} />: <Characterbycharacter ref={characterByCharacterRef} user={data.me} sentence={getPhraseDetails(data.getPhrasesInDeck[phraseOrder - 1])} mutationFunction={submitCorrect}/>}\n      </div>\n      <button disabled={parseInt(phraseOrder) === data.getPhrasesInDeck.length } style={{marginLeft: \"5%\"}} onClick={() => onClickEvent(deckId, parseInt(phraseOrder) + 1)}>\n        <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/right-arrow-button.svg\" />\n      </button>\n      </div>\n    </div>\n  )\n    \n}\nexport default Learn","/Users/corygallagher/Documents/node_projects/toneapp/client/src/Dashboard.js",["72"],"import React, { Component } from 'react'\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { redirectToLearnComponent} from './utils'\nimport { Link} from 'react-router-dom'\n\n\n\n\nconst GET_DECKS = gql`\nquery getDeckList {\n  getDecks {\n    deck_id\n    deck_name\n  }\n}\n`\nconst GET_PHRASES = gql`\nquery getPhraseList($deck_id: Int!) {\n  getPhrasesInDeck(deck_id: $deck_id) {\n    _id\n    phrase_order\n    full_phrase\n    phrase_no_punctuation\n    word_list\n    pinyin\n    pinyin_no_tones\n    written_tones\n    spoken_tones\n    is_completed_char\n    is_completed_full\n  }\n}\n`\n\nclass Dashboard extends Component {\n  state = {\n    deckIndexSelected: null\n  }\n\n  selectMenuItem = (index) => {\n    this.setState(prevState => ({deckIndexSelected: prevState.deckIndexSelected  === index ? null : index}));\n  }\n\n  getPhraseList = (deck_id) => {\n    return(\n      <Query query={GET_PHRASES} variables={{deck_id: deck_id}}>\n      {({ loading, error, data, refetch }) => {\n        if (loading) return <div>Fetching</div>\n        if (error) return <div>error</div>\n        return (\n          <div className=\"menuSubItemContainer\">\n          {data.getPhrasesInDeck.map((phrase)=>\n            <div className=\"menuSubItem\">\n            <span>{phrase.full_phrase}</span>\n            <Link className=\"menuSubItemLink\"\n              to={{\n                pathname: \"/learn/\" + deck_id + \"/\" + phrase.phrase_order,\n                state: { isFullSentenceMode: false }\n              }}\n            >\n            Char Mode\n            </Link>\n            {phrase.is_completed_char && (<span>COMPLETE</span>)}\n            <Link className=\"menuSubItemLink\"\n              to={{\n                pathname: \"/learn/\" + deck_id + \"/\" + phrase.phrase_order,\n                state: { isFullSentenceMode: true }\n              }}\n            >\n            Full Mode\n            </Link>\n             {phrase.is_completed_full && (<span>COMPLETE</span>)}           \n            </div>\n          )}\n          </div>\n        )\n      }}\n      </Query>\n    )\n  }\n\n  render() {\n    return(\n      <Query query={GET_DECKS}>\n      {({ loading, error, data, refetch }) => {\n        if (loading) return <div>Fetching</div>\n        if (error) return <div>error</div>\n        return(\n          <div className=\"menuContainer\">\n            <div className=\"menuHeader\"/>\n            <div className=\"menuList\">\n              {data.getDecks.map((deck, index)=>\n                <div className=\"menuItem\" onClick={() => this.selectMenuItem(index)}>\n                  <p>{deck.deck_name}</p>\n                  <span className={index === this.state.deckIndexSelected ? \"chevron bottom\": \"chevron top\"}/>\n                </div>\n               )}\n              {this.state.deckIndexSelected !== null && this.getPhraseList(1)}\n             </div>\n          </div>\n        )\n      }}\n      </Query>\n    )\n  }\n\n}\n\nexport default Dashboard",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":159,"column":127,"nodeType":"79","messageId":"80","endLine":159,"endColumn":129},{"ruleId":"77","severity":1,"message":"81","line":161,"column":127,"nodeType":"79","messageId":"80","endLine":161,"endColumn":129},{"ruleId":"82","severity":1,"message":"83","line":186,"column":9,"nodeType":"84","messageId":"85","endLine":186,"endColumn":18},{"ruleId":"82","severity":1,"message":"86","line":187,"column":11,"nodeType":"84","messageId":"85","endLine":187,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":204,"column":11,"nodeType":"89","endLine":204,"endColumn":107},{"ruleId":"87","severity":1,"message":"88","line":207,"column":11,"nodeType":"89","endLine":207,"endColumn":99},{"ruleId":"87","severity":1,"message":"88","line":210,"column":15,"nodeType":"89","endLine":210,"endColumn":105},{"ruleId":"77","severity":1,"message":"78","line":205,"column":127,"nodeType":"79","messageId":"80","endLine":205,"endColumn":129},{"ruleId":"77","severity":1,"message":"81","line":207,"column":127,"nodeType":"79","messageId":"80","endLine":207,"endColumn":129},{"ruleId":"87","severity":1,"message":"88","line":224,"column":13,"nodeType":"89","endLine":224,"endColumn":101},{"ruleId":"87","severity":1,"message":"88","line":228,"column":13,"nodeType":"89","endLine":228,"endColumn":101},{"ruleId":"87","severity":1,"message":"88","line":276,"column":17,"nodeType":"89","endLine":276,"endColumn":113},{"ruleId":"87","severity":1,"message":"88","line":279,"column":17,"nodeType":"89","endLine":279,"endColumn":105},{"ruleId":"87","severity":1,"message":"88","line":282,"column":21,"nodeType":"89","endLine":282,"endColumn":110},{"ruleId":"87","severity":1,"message":"88","line":285,"column":21,"nodeType":"89","endLine":285,"endColumn":111},{"ruleId":"87","severity":1,"message":"88","line":288,"column":21,"nodeType":"89","endLine":288,"endColumn":114},{"ruleId":"87","severity":1,"message":"88","line":291,"column":21,"nodeType":"89","endLine":291,"endColumn":111},{"ruleId":"82","severity":1,"message":"90","line":55,"column":28,"nodeType":"84","messageId":"85","endLine":55,"endColumn":40},{"ruleId":"87","severity":1,"message":"88","line":112,"column":9,"nodeType":"89","endLine":112,"endColumn":103},{"ruleId":"87","severity":1,"message":"88","line":118,"column":9,"nodeType":"89","endLine":118,"endColumn":104},{"ruleId":"82","severity":1,"message":"91","line":4,"column":10,"nodeType":"84","messageId":"85","endLine":4,"endColumn":34},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'btn_class' is assigned a value but never used.","Identifier","unusedVar","'spoken_tones' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'mutationData' is assigned a value but never used.","'redirectToLearnComponent' is defined but never used.","no-global-assign","no-unsafe-negation"]