{"version":3,"sources":["Login.js","Header.js","utils.js","Dashboard.js","Characterbycharacter.js","constants.js","Fullsentence.js","Learn.js","App.js","reportWebVitals.js","index.js"],"names":["SIGNUP_MUTATION","gql","UPGRADE_MUTATION","LOGIN_MUTATION","Login","state","isLogin","email","password","user_name","userId","role","this","props","user","user_id","user_role","setUserInfo","parseInt","setState","className","value","onChange","e","target","type","placeholder","mutation","variables","onCompleted","data","_confirm","onError","error","console","log","message","loading","onClick","handleLogin","disabled","length","substring","lastIndexOf","event","preventDefault","history","push","window","location","reload","Component","withRouter","Header","isLoggedIn","cname","name","ca","decodeURIComponent","document","cookie","split","i","c","charAt","indexOf","getCookie","currentPath","pathname","to","GET_DECKS","GET_PHRASES","Dashboard","deckIndexSelected","selectMenuItem","index","prevState","getPhraseList","deck_id","query","refetch","getPhrasesInDeck","map","phrase","style","display","minWidth","full_phrase","phrase_order","isFullSentenceMode","class","spoken_tones","is_completed_full","is_completed_char","getDecks","deck","deck_name","socket","io","connect","Characterbycharacter","initRecorder","stream","RecordRTC","sampleRate","bufferSize","numberOfAudioChannels","recorderType","StereoAudioRecorder","componentDidMount","on","prediction","test_sentence","toString","newToneArray","tones_recorded","splice","finished","automatic_mode","show_pinyin","sentence_finished","checkPhrase","componentDidUpdate","prevProps","sentence","isCorrect","startRecording","every","tone","mutationFunction","saveRecording","newAudio","blob","src","URL","createObjectURL","previousIndex","currentIndex","newAudioArray","new_audio","voice_present","recording","emit","voice_recording","character_index","threshold","threshold_decibels","_this","getElementById","navigator","mediaDevices","getUserMedia","audio","then","a","recorder","options","speechEvents","hark","predicted_tone","stopRecording","stop","getBlob","toggleMode","togglePinyin","replayAudio","play","playNativeVoice","letters","pinyin_no_tones","toLowerCase","toneNumber","Audio","restartSentence","handleCharClick","diplayString","text","isChars","parts","char","recordingButtonClick","harkObject","characters","id","flexDirection","height","pinyin","isComplete","join","justifyContent","fontSize","checked","strings","Fullsentence","howler","Howl","onplay","is_paused","milliseconds","onpause","is_playing","audioProgress","current","valueAsNumber","cancelAnimationFrame","requestRef","onend","onload","audioSlider","min","max","duration","format","audio_blob","is_recording","setSprites","minValue","currentValue","maxValue","_sprite","character_offsets","forEach","begin","end","spriteName","minimum","maximum","pauseAudio","pause","playWithSlider","start","Date","now","startPoint","requestAnimationFrame","animateSlider","interval","updateTime","getTone","showPinyin","displaySlider","shouldDisplay","ref","undoLastTone","lastRecording","pop","React","createRef","btns_disabled","backgroundColor","UPDATE_PROGRESS","Learn","useState","fullSentenceMode","setSentenceMode","useParams","deckId","phraseOrder","characterByCharacterRef","useRef","fullSentenceRef","useQuery","useMutation","updateProgress","mutationData","changeMode","getPhraseDetails","phrase_data","phrase_no_punctuation","replaceAll","onClickEvent","redirectToLearnComponent","submitCorrect","update","store","dashboardData","readQuery","writeQuery","checkComplete","marginRight","width","me","marginLeft","GET_USER","App","refetchUser","exact","path","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","credentials","client","ApolloClient","link","cache","InMemoryCache","ReactDOM"],"mappings":"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","file":"static/js/main.3c71cd7a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport gql from 'graphql-tag'\nimport { Mutation} from 'react-apollo'\nimport { withRouter } from 'react-router-dom';\n\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation($email: String!, $password: String!, $user_name: String!, $role: String!) {\n    CreateUser(user_email: $email, user_password: $password, user_name: $user_name, user_role: $role) {\n      _id\n      user_name\n      user_password\n      user_role\n    }\n  }\n`\nconst UPGRADE_MUTATION = gql`\n  mutation UpgradeMutation($email: String!, $password: String!, $user_name: String!) {\n    UpgradeUser(user_email: $email, user_password: $password, user_name: $user_name) {\n      _id\n      user_name\n      user_password\n      user_role\n    }\n  }\n`\n\nconst LOGIN_MUTATION = gql`\n  mutation LoginMutation($email: String!, $password: String!) {\n    Login(user_email: $email, user_password: $password) {\n      _id\n      user_name\n      user_password\n      user_role\n    }\n  }\n`\n\nclass Login extends Component {\n  state = {\n    isLogin: true, // switch between Login and SignUp\n    email: '',\n    password: '',\n    user_name: '',\n    userId: null,\n    role: \"STUDENT\"\n  }\n\n  componentDidMount(){\n    if(this.props.user){\n      const {user_name, user_id , user_role} = this.props.user\n      this.setUserInfo(user_name, parseInt(user_id), user_role)\n    }\n  }\n\n  setUserInfo(user_name, userId, role){\n    this.setState({user_name, userId: userId, role: role})\n\n  }\n\n render() {\n    const { isLogin, email, password, user_name, userId, role} = this.state\n    return (\n    <div>\n      <h4>{isLogin ? 'Login' : 'Sign Up'}</h4>\n\n      <div className=\"flex flex-column\">\n        {!isLogin && (\n          <input\n            value={user_name}\n            onChange={e => this.setState({ user_name: e.target.value })}\n            type=\"text\"\n            placeholder=\"Your name\"\n          />\n        )}\n        <input\n          value={email}\n          onChange={e => this.setState({ email: e.target.value })}\n          type=\"text\"\n          placeholder=\"Your email address\"\n        />\n        <input\n          value={password}\n          onChange={e => this.setState({ password: e.target.value })}\n          type=\"password\"\n          placeholder=\"Choose a safe password\"\n        />\n      </div>\n      <div>\n      <Mutation\n        mutation={isLogin ? LOGIN_MUTATION : role === 'TESTER' ? UPGRADE_MUTATION : SIGNUP_MUTATION}\n        variables={{ email, password, user_name, userId, role: \"STUDENT\"}}\n        onCompleted={data => this._confirm()}\n        onError={(error) => console.log(error.message)}\n      >\n        {(mutation, { loading, error }) => (\n          <div>\n            <button\n              type=\"button\"\n              onClick={e => this.handleLogin(e, mutation)}\n              disabled={!this.state.email.length || !this.state.password.length || (!this.state.user_name.length && !this.state.isLogin)}\n            >\n              {isLogin ? 'login' : 'create account'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => this.setState({ isLogin: !this.state.isLogin })}\n            >\n            {isLogin ? 'need to create an account?' : 'already have an account?'}\n\n            </button>\n            {error && <p>{error.message.substring(error.message.lastIndexOf(':') + 1)}</p>}\n          </div>\n        )}\n      </Mutation>\n      </div>\n    </div>\n  )\n\n }\n\n\n handleLogin(event, mutation){\n  event.preventDefault()\n  mutation()\n}\n\n _confirm() {\n  this.props.history.push('/')\n  window.location.reload(true);\n}\n\n\n}\n\n\nexport default withRouter(Login)","import React, { Component } from 'react'\nimport { withRouter } from 'react-router'\nimport { Link} from 'react-router-dom'\nimport { getCookie} from './utils'\n\n\nclass Header extends Component {\n\n  render() {\n    const isLoggedIn = !!getCookie('access-token');\n    const currentPath = this.props.location.pathname\n\n    return (\n      <div>\n        <div>\n            {currentPath !== \"/\" && (<div className=\"flex\">\n              <Link to=\"/\">\n                Dashboard\n              </Link>\n            </div>)}\n          </div>\n          {currentPath !== \"/login\" && (<div className=\"flex flex-fixed\">\n            {isLoggedIn && this.props.user && this.props.user.user_role !== 'TESTER' ? (\n              <div\n                onClick={() => {\n                  document.cookie = \"access-token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n                  document.cookie = \"refresh-token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n                  this.props.history.push('/')\n                  window.location.reload(true);\n                }}\n              >\n                Logout\n              </div>\n            ) : (\n              <Link to=\"/login\">\n                Login\n              </Link>\n            )}\n          </div>)}\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Header)","export const getCookie = (cname) => {\n  var name = cname + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n  for(var i = 0; i <ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\n\nexport const redirectToLearnComponent = (props, deck_id, phrase_order, fullSentenceMode) => {\n    props.history.push({\n      pathname: '/learn/' + deck_id + '/' + phrase_order,\n      state:{\n        isFullSentenceMode: fullSentenceMode\n      }\n    })\n }","import React, { Component } from 'react'\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { redirectToLearnComponent} from './utils'\nimport { Link} from 'react-router-dom'\n\nconst GET_DECKS = gql`\nquery getDeckList {\n  getDecks {\n    deck_id\n    deck_name\n  }\n}\n`\nexport const GET_PHRASES = gql`\nquery getPhraseList($deck_id: Int!) {\n  me {\n    _id\n    user_name\n    user_role\n    user_password\n  }\n  getPhrasesInDeck(deck_id: $deck_id) {\n    _id\n    phrase_order\n    full_phrase\n    phrase_no_punctuation\n    word_list\n    pinyin\n    pinyin_no_tones\n    written_tones\n    spoken_tones\n    is_completed_char\n    is_completed_full\n  }\n}\n`\n\nclass Dashboard extends Component {\n  state = {\n    deckIndexSelected: null\n  }\n\n  selectMenuItem = (index) => {\n    this.setState(prevState => ({deckIndexSelected: prevState.deckIndexSelected  === index ? null : index}));\n  }\n\n  getPhraseList = (deck_id) => {\n    return(\n      <Query query={GET_PHRASES} variables={{deck_id: deck_id}}>\n      {({ loading, error, data, refetch }) => {\n        if (loading) return <div>Fetching</div>\n        if (error) return <div>error</div>\n        return (\n          <div className=\"menuSubItemContainer\">\n          {data.getPhrasesInDeck.map((phrase)=>\n            <div className=\"menuSubItem\">\n            <span style={{ display: \"inlineBlock\", minWidth: \"50%\"}}>{phrase.full_phrase}</span>\n            <Link className=\"menuSubItemLink tooltip\"\n              to={{\n                pathname: \"/learn/\" + deck_id + \"/\" + phrase.phrase_order,\n                state: { isFullSentenceMode: false }\n              }}\n            >\n            Char Mode\n            <span class=\"tooltiptext\">Practice each character separately</span>\n            </Link>\n            <span className={\"circle \" + ((phrase.spoken_tones.length > 1 && phrase.is_completed_full) || phrase.is_completed_char ? \"\" : \"hide\")}/>\n            <Link className=\"menuSubItemLink tooltip\"\n              to={{\n                pathname: \"/learn/\" + deck_id + \"/\" + phrase.phrase_order,\n                state: { isFullSentenceMode: true }\n              }}\n            >\n            Full Mode\n            <span class=\"tooltiptext\">Practice entire phrase</span>\n            </Link>\n             <span className={\"circle \" + ((phrase.spoken_tones.length == 1 && phrase.is_completed_char) || phrase.is_completed_full ? \"\" : \"hide\")}/>     \n            </div>\n          )}\n          </div>\n        )\n      }}\n      </Query>\n    )\n  }\n\n  render() {\n    return(\n      <Query query={GET_DECKS}>\n      {({ loading, error, data, refetch }) => {\n        if (loading) return <div>Fetching</div>\n        if (error) return <div>error</div>\n        return(\n          <div className=\"menuContainer\">\n            <div className=\"menuHeader\">\n            <p style={{\"marginLeft\": \"10%\", \"fontSize\": \"2vw\"}}>Decks</p>\n            </div>\n            <div className=\"menuList\">\n              {data.getDecks.map((deck, index)=>\n                <div className=\"menuItem\" onClick={() => this.selectMenuItem(index)}>\n                  <p>{deck.deck_name}</p>\n                  <span className={index === this.state.deckIndexSelected ? \"chevron bottom\": \"chevron top\"}/>\n                </div>\n               )}\n              {this.state.deckIndexSelected !== null && this.getPhraseList(1)}\n             </div>\n          </div>\n        )\n      }}\n      </Query>\n    )\n  }\n\n}\n\nexport default Dashboard","import React, { Component } from 'react'\nimport hark from 'hark'\n\nimport io from \"socket.io-client\"\nimport RecordRTC from \"recordrtc\"\n\nimport './App.css';\nimport './Switch.css';\n\n\nlet endpoint = \"http://localhost:5000\"\nlet socket = io.connect(`${endpoint}`)\nclass Characterbycharacter extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      threshold_decibels: 50,\n      voice_present: false,\n      recording: false,\n      new_audio: [],\n      tones_recorded: [],\n      currentIndex: 0,\n      sentence_finished: false,\n      automatic_mode: false,\n      show_pinyin: false\n    }\n    this.state.test_sentence = this.props.sentence\n    this.recorder = null\n    this.speechEvents = null\n  }\n\n  initRecorder = (stream) => {\n      let recorder = RecordRTC(stream, {\n      type: 'audio',\n      sampleRate: 44100,\n      bufferSize: 2048,\n      numberOfAudioChannels: 1,\n      recorderType: RecordRTC.StereoAudioRecorder\n    });\n      return recorder\n  }\n\n  componentDidMount = () => {\n    socket.on('predicted_tone', data => {\n      const prediction = this.state.test_sentence.spoken_tones[data[\"index\"]] === \"_\" ? \"_\" : data[\"prediction\"].toString()\n      const newToneArray = [...this.state.tones_recorded]\n      newToneArray.splice(data[\"index\"], 1, prediction)\n      const finished = newToneArray.length === this.state.test_sentence.spoken_tones.length\n      const automatic = this.state.automatic_mode && !finished\n      const showPinyin = finished || this.state.show_pinyin\n      this.setState({tones_recorded: newToneArray, sentence_finished: finished},() => {this.checkPhrase()})\n    })\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if(prevProps.sentence.phrase_order && prevProps.sentence.phrase_order !== this.props.sentence.phrase_order){\n      this.setState({test_sentence: this.props.sentence})\n    }\n  }\n\n  checkPhrase = () => {\n    let isCorrect = false\n    if(!this.state.sentence_finished && this.state.automatic_mode){\n      this.startRecording()\n    } else if(this.state.sentence_finished){\n      isCorrect = this.state.tones_recorded.every((tone,index) => tone === this.state.test_sentence.spoken_tones[index])    \n    }\n    if(isCorrect && this.props.user && !this.state.test_sentence.is_completed_char){\n      this.props.mutationFunction(true, this.state.test_sentence.is_completed_full)\n    }\n\n  }\n\n  saveRecording = (newAudio, blob) => {\n    newAudio.src = URL.createObjectURL(blob)\n    const previousIndex = this.state.currentIndex\n    const newAudioArray = [...this.state.new_audio]\n    newAudioArray.splice(this.state.currentIndex, 1, newAudio)\n\n    this.setState({voice_present: false, new_audio: newAudioArray, recording: false, currentIndex: previousIndex + 1}, () =>\n    {\n        socket.emit('tone_recorded', {voice_recording: blob, character_index: previousIndex, threshold: this.state.threshold_decibels});\n    })\n   \n  }\n\n  startRecording = () => {\n    let _this = this\n    var newAudio = document.getElementById(\"replay-\" + _this.state.currentIndex);\n    navigator.mediaDevices.getUserMedia({audio: true }).then(async function(stream) {\n        _this.recorder = _this.initRecorder(stream)\n        var options = {threshold: -1 * _this.state.threshold_decibels};//-100 is silence -50 is the default\n        _this.speechEvents = hark(stream, options);\n\n        _this.recorder.startRecording();\n\n        _this.speechEvents.on('speaking', function() {\n          console.log('speaking');\n          _this.setState({voice_present: true, predicted_tone: null})\n        });\n\n        _this.speechEvents.on('stopped_speaking', function() {\n          console.log('STOPPED SPEAKING');\n          _this.recorder.stopRecording(async function() {\n          _this.speechEvents.stop()\n          let blob = await _this.recorder.getBlob();\n          _this.saveRecording(newAudio,blob)\n          });\n\n        });\n        _this.setState({recording: true})\n    });\n  }\n\n  toggleMode = () => {\n    this.setState({automatic_mode: !this.state.automatic_mode})\n  }\n\n  togglePinyin = () => {\n    this.setState({show_pinyin: !this.state.show_pinyin})\n  }\n\n  replayAudio = () => {\n    if(this.state.new_audio.length){\n      this.state.new_audio[this.state.currentIndex].play()\n    }\n  }\n\n  playNativeVoice = () => {\n    const letters = this.state.test_sentence.pinyin_no_tones[this.state.currentIndex].toLowerCase()\n    const toneNumber = this.state.test_sentence.spoken_tones[this.state.currentIndex]\n    const fileName = '/native_voice_audio/' + letters + toneNumber + '_FV1_MP3.mp3'\n    const audio = new Audio(fileName)\n    audio.play()\n  }\n\n\n  restartSentence = () => {\n    this.setState({currentIndex: 0, tones_recorded: [], sentence_finished: false, new_audio: [], recording: false, automatic_mode: false, show_pinyin: false})\n  }\n\n  handleCharClick = (index) => {\n    if(index <= this.state.tones_recorded.length){\n      this.setState({currentIndex: index})  \n    }\n  }\n\n  diplayString = (text = '', isChars = false) => {\n     const parts = text.split('')\n     return (\n       <span className=\"String-holder charByChar\">\n         {parts.map((char,index)=> {\n           if(isChars && index === this.state.currentIndex){\n             return <mark key={index} onClick={() => this.handleCharClick(index)}>{char}</mark>\n           } else if(!isChars && index <= this.state.tones_recorded.length -1 && this.state.test_sentence.spoken_tones[index] == this.state.tones_recorded[index]) {\n             return <mark style={{\"backgroundColor\": \"green\"}}key={index} onClick={() => this.handleCharClick(index)}>{char}</mark>\n           } else if(!isChars && index <= this.state.tones_recorded.length -1 && this.state.test_sentence.spoken_tones[index] != this.state.tones_recorded[index]) {\n             return <mark style={{\"backgroundColor\": \"red\"}}key={index} onClick={() => this.handleCharClick(index)}>{char}</mark>\n           } else{\n             return <span key={index} onClick={() => this.handleCharClick(index)}>{char}</span>\n           }\n\n         })}\n      </span>\n     )\n  }\n\n  recordingButtonClick = () => {\n    let _this = this\n    if(_this.state.recording){\n      _this.setState({automatic_mode: false, recording: false}, ()=> {\n        _this.state.recorder.stopRecording(async function() {\n          _this.state.harkObject.stop()\n        });\n      })\n    } else{\n      _this.startRecording()\n    }\n  }\n\n  render(){\n    let btn_class = this.state.recording ? \"pressedButton\" : \"defaultButton\";\n    const spoken_tones = this.state.sentence_finished ? this.state.test_sentence.spoken_tones : ''\n    return (\n      <div>\n        {\n          this.state.test_sentence.characters.split('').map((recording, index)=> {\n            return <audio key={index} id={\"replay-\" + index}/>\n          })\n        }\n        <div style={{display: \"inline-flex\", flexDirection: \"column\"}}>\n          <p style={{\"textAlign\": \"center\", height: \"1vh\"}}>{this.state.show_pinyin && this.state.test_sentence.pinyin}</p>\n          <span className={\"circle \" + (this.props.isComplete() ? \"\" : \"hide\")}/>  \n          <span style={{\"textAlign\": \"center\"}}>{this.state.test_sentence.display}</span>\n          {/*this.diplayString(spoken_tones, false)*/}\n          {this.diplayString(this.state.test_sentence.characters, true)}\n          {this.diplayString(this.state.tones_recorded.join(''), false)}\n        </div>\n        <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", \"marginTop\": \"20px\", \"marginBottom\": \"20px\"}}>\n        <button className=\"tooltip\" disabled={this.state.currentIndex >= this.state.test_sentence.spoken_tones.length} onClick={this.recordingButtonClick}>\n          <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/record-voice-button.svg\" />\n          <span className=\"tooltiptext\">Record voice</span>\n        </button>\n        <button className=\"tooltip\" disabled={this.state.currentIndex >=this.state.tones_recorded.length}  onClick={this.replayAudio}>\n          <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/play-button.svg\" />\n          <span className=\"tooltiptext\">Replay recording for selected character</span>\n        </button>\n         <button className=\"tooltip\" disabled={this.state.tones_recorded.length === 0} onClick={this.restartSentence}>\n              <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/delete-button.svg\" />\n              <span className=\"tooltiptext\">Restart phrase</span>\n        </button>\n        </div>\n         <button  className=\"defaultButton\"  disabled={this.state.test_sentence.spoken_tones[this.state.currentIndex] === '_' || this.state.currentIndex >= this.state.test_sentence.spoken_tones.length} onClick={this.playNativeVoice}>\n                  Play Native Speaker Audio\n        </button>\n        <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"center\"}}>\n          <p style={{\"height\": \"25px\"}}>{this.state.voice_present ? \"Voice heard\" : this.state.recording ?  \"Recording...\" : \"\"}</p>\n          <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", \"marginTop\": \"20px\"}}>\n            <p className=\"tooltip\" style={{fontSize: \"14px\", \"marginBlockStart\": \"-1.5em\", \"marginRight\": \"20px\", \"width\": \"50px\"}}>{\"Manual Mode\"}\n            <span className=\"tooltiptext\">User must press the record button for each character</span>\n            </p> \n            <label className=\"switch\">\n              <input type=\"checkbox\" checked={this.state.automatic_mode} onChange={this.toggleMode} />\n              <span className=\"slider round\"></span>\n            </label>\n           <p className=\"tooltip\" style={{fontSize: \"14px\", \"width\": \"50px\", \"marginBlockStart\": \"-1.5em\", \"marginLeft\": \"3%\"}}>{\"Automatic Mode\"}\n           <span className=\"tooltiptext\">Recording will restart automatically after selected chaaracter changes</span>\n           </p>\n           </div>\n           <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", \"marginTop\": \"20px\"}}>\n           <p style={{fontSize: \"14px\", \"marginBlockStart\": \"-1.5em\", \"marginRight\": \"20px\", \"width\": \"50px\"}}>{\"Hide Pinyin\"}</p>\n            <label className=\"switch\">\n              <input type=\"checkbox\" checked={this.state.show_pinyin} onChange={this.togglePinyin} />\n              <span className=\"slider round\"></span>\n            </label>\n           <p style={{fontSize: \"14px\", \"width\": \"50px\", \"marginBlockStart\": \"-1.5em\", \"marginLeft\": \"3%\"}}>{\"Show Pinyin\"}</p>\n          </div>\n         </div>\n      </div>\n    );\n  }\n}\n\nexport default Characterbycharacter;\n","export const strings =  {\n\t\"BEFORE\": \"before\",\n\t\"AFTER\": \"after\",\n\t\"ALL\": \"all\"\n}","import React, { Component } from 'react'\nimport {Howl} from 'howler';\n\nimport hark from 'hark'\nimport {strings} from './constants'\n\nimport io from \"socket.io-client\"\nimport RecordRTC from \"recordrtc\"\n\nimport './App.css';\nimport './Switch.css';\n\n\nlet endpoint = \"http://localhost:5000\"\nlet socket = io.connect(`${endpoint}`)\nclass Fullsentence extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      threshold_decibels: 50,\n      milliseconds: 0,\n      voice_present: false,\n      is_recording: false,\n      is_playing: false,\n      is_paused: false,\n      sentence_finished: false,\n      currentIndex: null,\n      character_offsets: [],\n      tones_recorded: [],\n      show_pinyin: false\n    }\n    this.state.test_sentence = this.props.sentence\n    this.audioProgress = React.createRef();\n    this.requestRef = React.createRef();\n    this.howler = null\n    this.recorder = null\n    this.speechEvents = null\n  }\n\n  componentDidMount = () => {\n    socket.on('predicted_tone', data => {\n      const prediction = this.state.test_sentence.spoken_tones[data[\"index\"]] === \"_\" ? \"_\" : data[\"prediction\"].toString()\n      const newToneArray = [...this.state.tones_recorded, prediction]\n      this.setState({tones_recorded: newToneArray},() => {this.checkPhrase()})\n    })\n  }\n\n  checkPhrase = () => {\n    let isCorrect = false\n    if(this.state.sentence_finished){\n      isCorrect = this.state.tones_recorded.every((tone,index) => tone === this.state.test_sentence.spoken_tones[index])    \n    }\n    if(isCorrect && this.props.user && !this.state.test_sentence.is_completed_full){\n      this.props.mutationFunction(this.state.test_sentence.is_completed_char, true)\n    }\n  }\n\n\n  componentDidUpdate = (prevProps) => {\n    if(prevProps.sentence.phrase_order && prevProps.sentence.phrase_order !== this.props.sentence.phrase_order){\n      this.setState({test_sentence: this.props.sentence})\n    }\n  }\n\n  initRecorder = (stream) => {\n      let recorder = RecordRTC(stream, {\n      type: 'audio',\n      sampleRate: 44100,\n      bufferSize: 2048,\n      numberOfAudioChannels: 1,\n      recorderType: RecordRTC.StereoAudioRecorder\n    });\n      return recorder\n  }\n\n  startRecording = () => {\n    let _this = this\n    navigator.mediaDevices.getUserMedia({audio: true }).then(async function(stream) {\n        _this.recorder = _this.initRecorder(stream)\n        var options = {threshold: -1 * _this.state.threshold_decibels};//-100 is silence -50 is the default\n        _this.speechEvents = hark(stream, options);\n\n        _this.recorder.startRecording();\n\n        _this.speechEvents.on('speaking', function() {\n          console.log('speaking');\n          _this.setState({voice_present: true})\n        });\n\n        _this.speechEvents.on('stopped_speaking', function() {\n          console.log('STOPPED SPEAKING');\n          _this.recorder.stopRecording(async function() {\n          _this.speechEvents.stop()\n          let blob = await _this.recorder.getBlob()\n          socket.emit('phrase_recorded', {voice_recording: blob});\n          _this.howler = new Howl({\n            src: [URL.createObjectURL(blob)],\n            onplay: function(){\n              console.log(\"PLAY\")\n              _this.setState({is_paused: false, milliseconds: 0})\n            },\n            onpause: function(){\n              _this.setState({is_playing: false, is_paused: true, milliseconds: _this.audioProgress.current.valueAsNumber}, ()=> {cancelAnimationFrame(_this.requestRef.current)})\n            },\n            onend: function(){\n              _this.setState({is_playing: false, milliseconds: _this.audioProgress.current.valueAsNumber})\n            },\n            onload: function(){\n              var audioSlider = document.getElementById(\"audio-slider\")\n              audioSlider.min = 0\n              audioSlider.max = this.duration() * 1000\n              audioSlider.value = 0\n            },             \n            format:[\"wav\"]\n          });\n          _this.setState({voice_present: false, audio_blob: blob, is_recording: false})\n          });\n\n        });\n        _this.setState({is_recording: true})\n    });\n  }\n\n  setSprites = (minValue, currentValue, maxValue) => {\n     this.howler._sprite = {\n      \"before\" : [minValue, currentValue-minValue], \n      \"after\" : [currentValue, maxValue-currentValue],\n      \"all\" : [minValue, maxValue-minValue]\n    }\n\n    this.state.character_offsets.forEach((char, index) => {\n      this.howler._sprite[index.toString()] = [char.begin, char.end]\n    })\n  }\n\n  replayAudio = (spriteName) => {\n    if(this.howler != null){\n      //const minimum = this.state.character_offsets.length ? this.state.character_offsets[this.state.character_offsets.length -1] : 0\n      const minimum = parseInt(this.audioProgress.current.min)\n      const maximum = parseInt(this.audioProgress.current.max)\n      const currentValue = parseInt(this.audioProgress.current.valueAsNumber)\n\n      this.setSprites(minimum, currentValue, maximum)\n      this.howler.play(spriteName)\n    }\n  }\n\n  pauseAudio = () => {\n    if(this.howler != null){\n      this.howler.pause();\n    }\n  }\n\n  restartSentence = () => {\n    this.howler = null\n    this.setState({ milliseconds: 0, tones_recorded: [], character_offsets: [], currentIndex: null, show_pinyin: false, sentence_finished: false})\n  }\n\n  playWithSlider = () => {\n      let start = Date.now();\n      let audioSlider = document.getElementById(\"audio-slider\")\n      let startPoint = this.audioProgress.current.valueAsNumber\n      this.replayAudio(strings.AFTER)\n      let _this = this\n      _this.requestRef.current = requestAnimationFrame(function animateSlider() {\n          let interval = Date.now() - start + startPoint\n          audioSlider.value = interval\n          if (interval < parseInt(audioSlider.max)) _this.requestRef.current = requestAnimationFrame(animateSlider); // queue request for next frame\n      });\n  }\n\n  updateTime = () => {\n    this.setState({milliseconds: this.audioProgress.current.valueAsNumber})\n  }\n\n  getTone = () => {\n    socket.emit('cut_phrase', {begin: parseInt(this.audioProgress.current.min), end: parseInt(this.audioProgress.current.valueAsNumber), \"character_index\": this.state.tones_recorded.length});\n    const finished = this.state.tones_recorded.length === this.state.test_sentence.spoken_tones.length - 1\n    const showPinyin = finished || this.state.show_pinyin\n    let _this = this\n    this.setState(prevState => ({character_offsets: [...prevState.character_offsets, {begin: parseInt(this.audioProgress.current.min), end: parseInt(this.audioProgress.current.valueAsNumber) - parseInt(this.audioProgress.current.min)}], sentence_finished: finished, show_pinyin: showPinyin}), ()=>{\n      _this.setSprites(parseInt(this.audioProgress.current.valueAsNumber), parseInt(this.audioProgress.current.valueAsNumber), parseInt(this.audioProgress.current.max))\n      var audioSlider = document.getElementById(\"audio-slider\")\n      audioSlider.max = this.audioProgress.current.max\n      audioSlider.min = this.audioProgress.current.valueAsNumber\n      audioSlider.value = this.audioProgress.current.valueAsNumber\n    })\n  }\n\n  handleCharClick = (index) => {\n    let _this = this\n    if(index < this.state.tones_recorded.length){\n      this.setState({currentIndex: index}, ()=> {_this.howler.play(index.toString())})  \n    }\n  }\n\n  diplayString = (text = '', isChars = false) => {\n     const parts = text.split('')\n     return (\n       <span className=\"String-holder\">\n         {parts.map((char,index)=> {\n           if(isChars && index === this.state.currentIndex){\n             return <mark key={index} onClick={() => this.handleCharClick(index)}>{char}</mark>\n           } else if(!isChars && index <= this.state.tones_recorded.length -1 && this.state.test_sentence.spoken_tones[index] == this.state.tones_recorded[index]) {\n             return <mark style={{\"backgroundColor\": \"green\"}}key={index} onClick={() => this.handleCharClick(index)}>{char}</mark>\n           } else if(!isChars && index <= this.state.tones_recorded.length -1 && this.state.test_sentence.spoken_tones[index] != this.state.tones_recorded[index]) {\n             return <mark style={{\"backgroundColor\": \"red\"}}key={index} onClick={() => this.handleCharClick(index)}>{char}</mark>\n           } else{\n             return <span key={index} onClick={() => this.handleCharClick(index)}>{char}</span>\n           }\n\n         })}\n      </span>\n     )\n  }\n\n  displaySlider = (shouldDisplay) => {\n    return (\n      <div style={{\"height\": \"3vh\"}}>\n      {shouldDisplay && (\n        <div>\n          <button className=\"defaultButton tooltip\" onClick={() => this.replayAudio(strings.BEFORE)}>\n            <img style={{\"padding\": \"0\",\"height\":  \"3vh\", \"width\":  \"2vw\"}}src=\"/play-button.svg\" />\n            <span className=\"tooltiptext\">Play audio left of cursor</span>\n          </button>\n          <input style={{\"width\": \"65%\"}} id=\"audio-slider\" ref={this.audioProgress} type=\"range\" onChange={this.updateTime} />\n          <button  className=\"defaultButton tooltip\" onClick={() => this.replayAudio(strings.AFTER)}>\n            <img style={{\"padding\": \"0\",\"height\":  \"3vh\", \"width\":  \"2vw\"}}src=\"/play-button.svg\" />\n            <span className=\"tooltiptext\">Play audio right of cursor</span>\n          </button> \n        </div>)}\n      </div>\n     )\n  }\n\n  togglePinyin = () => {\n    this.setState({show_pinyin: !this.state.show_pinyin})\n  }\n\n  undoLastTone = () => {\n    let character_offsets = [...this.state.character_offsets]\n    const lastRecording = character_offsets.pop()\n    const tones_recorded = [...this.state.tones_recorded]\n    tones_recorded.pop()\n    console.log(character_offsets, lastRecording)\n    let _this = this\n    this.setState(prevState => ({character_offsets: character_offsets, tones_recorded: tones_recorded, milliseconds: lastRecording.begin, sentence_finished: false, show_pinyin: prevState.show_pinyin}), ()=>{\n      _this.setSprites(parseInt(lastRecording.begin), parseInt(lastRecording.begin), parseInt(this.audioProgress.current.max))\n      var audioSlider = document.getElementById(\"audio-slider\")\n      audioSlider.max = this.audioProgress.current.max\n      audioSlider.min = lastRecording.begin\n      audioSlider.value = lastRecording.begin\n    })\n    \n  }\n\n  render(){\n    //const btn_class = this.state.is_recording ? \"pressedButton\" : \"defaultButton\";\n    const spoken_tones = this.state.sentence_finished ? this.state.test_sentence.spoken_tones : ''\n    const btns_disabled = this.howler == null\n    console.log(this.state)\n    return (\n          <div>\n            <audio id=\"replay\"/>\n            <div style={{display: \"inline-flex\", flexDirection: \"column\"}}>\n              <p style={{\"textAlign\": \"center\", height: \"1vh\"}}>{this.state.show_pinyin && this.state.test_sentence.pinyin}</p>\n              <span className={\"circle \" + (this.props.isComplete() ? \"\" : \"hide\")}/>  \n              <span style={{\"textAlign\": \"center\"}}>{this.state.test_sentence.display}</span>\n              {/*this.diplayString(spoken_tones, false)*/}\n              {this.diplayString(this.state.test_sentence.characters, true)}\n              {this.diplayString(this.state.tones_recorded.join(''), false)}\n            </div>\n            <p style={{\"height\": \"3vh\"}}>{this.state.voice_present ? \"Voice heard\" : this.state.is_recording ?  \"Recording...\" : \"\"}</p>\n            <p style={{\"height\": \"3vh\"}}>{this.state.milliseconds ? (this.state.milliseconds/1000) + \" Seconds\" : null}</p>\n            {this.displaySlider(this.howler != null)}\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", \"marginTop\": \"4vh\"}}>\n              <button className=\"tooltip\" style={{backgroundColor: this.state.is_recording ? \"darkgray\": \"white\"}} onClick={this.startRecording}>\n                <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/record-voice-button.svg\" />\n                <span className=\"tooltiptext\">Record voice</span>\n              </button>\n              <button className=\"tooltip\" disabled={btns_disabled}  onClick={()=> this.setState({is_playing: true}, ()=>{this.playWithSlider()})}>\n                <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/play-button.svg\" />\n                <span className=\"tooltiptext\">Play audio (cursor will advance)</span>\n              </button>\n              <button  className=\"tooltip\" disabled={btns_disabled || !this.state.is_playing} onClick={this.pauseAudio}>\n                    <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/pause-button.svg\" />\n                    <span className=\"tooltiptext\">Pause audio (cursor will stop)</span>\n              </button>\n              <button   className=\"tooltip\" disabled={btns_disabled} onClick={() => this.replayAudio(strings.ALL)}>\n                    <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/replay-button.svg\" />\n                    <span className=\"tooltiptext\">Play entire remaining audio(cursor will not move)</span>\n              </button>\n               <button  className=\"tooltip\" disabled={btns_disabled} onClick={this.undoLastTone}>\n                    <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/backspace-button.svg\" />\n                    <span className=\"tooltiptext\">Undo last audio cut</span>\n              </button>\n               <button  className=\"tooltip\" disabled={btns_disabled} onClick={this.restartSentence}>\n                    <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/delete-button.svg\" />\n                    <span className=\"tooltiptext\">Restart sentence</span>\n              </button>\n              <button  className=\"tooltip\" disabled={btns_disabled} onClick={this.getTone}>\n                    <span className=\"tooltiptext\">Get tone of audio left of the cursor</span>\n                    Get Tone \n              </button>\n             </div>\n             <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", \"marginTop\": \"8vh\"}}>\n             <p style={{fontSize: \"14px\", \"marginBlockStart\": \"-1.5em\", \"marginRight\": \"20px\", \"width\": \"50px\"}}>{\"Hide Pinyin\"}</p>\n              <label className=\"switch\">\n                <input type=\"checkbox\" checked={this.state.show_pinyin} onChange={this.togglePinyin} />\n                <span className=\"slider round\"></span>\n              </label>\n             <p style={{fontSize: \"14px\", \"width\": \"50px\", \"marginBlockStart\": \"-1.5em\", \"marginLeft\": \"3%\"}}>{\"Show Pinyin\"}</p>\n            </div>\n        </div>\n\n    );\n  }\n}\n\nexport default Fullsentence;","import { useState, useRef} from 'react'\nimport Characterbycharacter from './Characterbycharacter'\nimport Fullsentence from './Fullsentence'\nimport { useQuery, useMutation } from  'react-apollo';\nimport gql from 'graphql-tag';\nimport { redirectToLearnComponent} from './utils'\nimport { useParams } from \"react-router-dom\";\nimport { GET_PHRASES } from './Dashboard'\n\nconst UPDATE_PROGRESS = gql`\nmutation updateProgress($deck_id: Int!, $phrase_order: Int!, $is_completed_char: Boolean!, $is_completed_full: Boolean!) {\n  setPhraseLearned(deck_id: $deck_id, phrase_order: $phrase_order, is_completed_char: $is_completed_char, is_completed_full: $is_completed_full){\n    is_completed_char\n    is_completed_full\n  }\n}\n`\n\nconst Learn = (props) => {\n  console.log(props)\n\n  const [fullSentenceMode, setSentenceMode] = useState(props.location.state.isFullSentenceMode);\n\n  const { deckId, phraseOrder } = useParams();\n  const characterByCharacterRef = useRef();\n  const fullSentenceRef = useRef();\n\n  const { loading, error, data } = useQuery(GET_PHRASES, {\n    variables: {deck_id: parseInt(deckId)}\n  });\n\n  const [updateProgress, { mutationData }] = useMutation(UPDATE_PROGRESS)\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  function changeMode(isFullSentenceMode){\n    setSentenceMode(isFullSentenceMode)\n  }\n\n  function getPhraseDetails(phrase){\n    console.log(phrase)\n    let phrase_data = {}\n    phrase_data[\"deck_id\"] = parseInt(deckId)\n    phrase_data[\"phrase_order\"] = parseInt(phraseOrder)\n    phrase_data[\"display\"] = phrase.full_phrase\n    phrase_data[\"characters\"] = phrase.phrase_no_punctuation\n    phrase_data[\"pinyin\"] = phrase.pinyin.join(\" \")\n    phrase_data[\"spoken_tones\"] = phrase.spoken_tones.join(\"\").replaceAll(\"5\",\"_\")\n    phrase_data[\"pinyin_no_tones\"] = phrase.pinyin_no_tones\n    phrase_data[\"phrase_order\"] = phrase.phrase_order\n    phrase_data[\"is_completed_char\"] = phrase.is_completed_char || false\n    phrase_data[\"is_completed_full\"] = phrase.is_completed_full || false\n    console.log(phrase_data)\n    return phrase_data\n  }\n\n  function onClickEvent(deck_id, phrase_order){\n    if(fullSentenceMode){\n      fullSentenceRef.current.restartSentence()\n    }else{\n      characterByCharacterRef.current.restartSentence()\n    }\n    redirectToLearnComponent(props, deck_id, phrase_order, fullSentenceMode)\n  }\n\n  function submitCorrect(is_completed_char, is_completed_full){\n    updateProgress({variables:{deck_id: parseInt(deckId), phrase_order: parseInt(phraseOrder), is_completed_char: is_completed_char, is_completed_full: is_completed_full}, \n      update: (store)=> {\n        const dashboardData = store.readQuery({ query: GET_PHRASES, variables: { deck_id: parseInt(deckId) } })\n        dashboardData.getPhrasesInDeck[phraseOrder - 1][\"is_completed_char\"] = is_completed_char\n        dashboardData.getPhrasesInDeck[phraseOrder - 1][\"is_completed_full\"] = is_completed_full\n        console.log(dashboardData)\n        store.writeQuery({\n          query: GET_PHRASES,\n          dashboardData\n        })\n     }})    \n  }\n\n  function checkComplete(){\n    return ((data.getPhrasesInDeck[phraseOrder - 1][\"is_completed_char\"] && !fullSentenceMode) || (data.getPhrasesInDeck[phraseOrder - 1][\"is_completed_full\"] && fullSentenceMode))\n  }\n\n  return(\n    <div className=\"LearnContainer\">\n      <div className=\"Navbar\">\n        <p className={!fullSentenceMode ? \"selectedItem\": \"\"} onClick={() => changeMode(false)}>Character by Character</p>\n        <p className={fullSentenceMode ? \"selectedItem\": \"\"} onClick={() => changeMode(true)}>Full Phrase</p>\n      </div>\n      \n      <div className=\"toneTrainingInterface\">\n      <button className=\"tooltip\" disabled={phraseOrder=== \"1\" } style={{marginRight: \"5%\"}}  onClick={() => onClickEvent(deckId,  parseInt(phraseOrder) - 1)}>\n        <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/left-arrow-button.svg\" />\n        <span class=\"tooltiptext\">Previous phrase</span>\n      </button>\n      <div style={{width: \"75%\"}}>\n      {fullSentenceMode ? <Fullsentence ref={fullSentenceRef} isComplete={checkComplete} user={data.me} sentence={getPhraseDetails(data.getPhrasesInDeck[phraseOrder - 1])} mutationFunction={submitCorrect} />: <Characterbycharacter ref={characterByCharacterRef} isComplete={checkComplete} user={data.me} sentence={getPhraseDetails(data.getPhrasesInDeck[phraseOrder - 1])} mutationFunction={submitCorrect}/>}\n      </div>\n      <button className=\"tooltip\" disabled={parseInt(phraseOrder) === data.getPhrasesInDeck.length } style={{marginLeft: \"5%\"}} onClick={() => onClickEvent(deckId, parseInt(phraseOrder) + 1)}>\n        <img style={{\"padding\": \"0\",\"height\":  \"7vh\", \"width\":  \"4vw\"}}src=\"/right-arrow-button.svg\" />\n        <span style={{\"left\": \"inherit\", \"right\": \"105%\"}} class=\"tooltiptext\">Next phrase</span>\n      </button>\n      </div>\n    </div>\n  )\n    \n}\nexport default Learn","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Login from './Login'\nimport Header from './Header'\nimport Dashboard from './Dashboard'\nimport Learn from './Learn'\nimport {Query} from 'react-apollo';\nimport gql from 'graphql-tag';\n\n\nconst GET_USER = gql`\nquery getUser {\n  me {\n    _id\n    user_name\n    user_role\n    user_password\n  }\n}\n`\n\nclass App extends Component {\n  render() {\n    return(\n      <div>\n      <Query query={GET_USER}>\n      {({ loading, error, data, refetch }) => {\n        if (loading) return <div>Fetching</div>\n        if (error) return <div>error</div>\n        const user = data.me\n        return(\n          <div>\n          <Header user={user} refetchUser={refetch}/>\n          <div className=\"App\"> \n            <header className=\"App-header\">  \n          <Switch>\n            <Route exact path=\"/\" user={user} component={Dashboard} />\n            <Route exact path=\"/learn/:deckId/:phraseOrder\" component={Learn} />\n            <Route exact path=\"/login\" render={() => (<Login user={user} refetchUser={refetch}/>)} />\n          </Switch>\n        </header>\n      </div>\n      </div>\n        )\n      }}\n      </Query>\n      </div>\n    )\n  }\n\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\n//import * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { BrowserRouter } from 'react-router-dom'\n\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n  credentials: 'include'\n\n})\n\n\nconst client = new ApolloClient({\n  //link: authLink.concat(httpLink),\n  link: httpLink,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\nreportWebVitals();\n\n/*\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n*/"],"sourceRoot":""}